<%
var metadata = locals.metadata;
var localName = locals.localName;
%>/**
 * @module <%=localName%>
 */
(function (module, define) {
	// using non-strict mode, otherwise the re-assignment of require would throw TypeError
	if (typeof require !== 'function') {
		require = module.require;
	}

	var EventEmitter = require('events');
	var inherits = require('util').inherits;
	var RpcTunnel = require('json-ws/client');

	/**
	 * @param {(url|Transport)} url - Either url of server (string) or Transport instance to be used as a sole transport.
	 * @constructor
	 * @alias module:<%=localName%>.<%=localName%>
	 */
	var <%=localName%> = module.exports.<%=localName%> = function <%=localName%>(url, sslSettings) {
		if (!this instanceof <%=localName%>) {
			return new <%=localName%>(url);
		}
		if (!url) {
			throw new Error('Invalid proxy URL');
		}
		if (typeof url !== 'string') {
			this._transport = url;
			this.defaultTransport = null;
			this.rpc = new RpcTunnel(url);
		} else {
			this._transport = null;
			this.rpc = new RpcTunnel(url, sslSettings);
			this.defaultTransport = 'http';
		}
		var self = this;
		this.rpc.on('event', function(e) {
			self.emit(e.name, e.data);
		});
		function rebind(obj) {
			var result = {};
			for (var i in obj) {
				var prop = obj[i];
				if (typeof prop === 'function') {
					result[i] = prop.bind(self);
				} else if (typeof prop === 'object') {
					result[i] = rebind(prop);
				}
			}
			return result;
		}
		for (var i in this) {
			if (this[i] && this[i]._ns) {
				this[i] = rebind(this[i]);
			}
		}
	};
	inherits(<%=localName%>, EventEmitter);
	Object.defineProperty(<%= localName %>, 'VERSION', { value: '<%= metadata.version.slice(0, metadata.version.lastIndexOf('.')) %>'});

	<%=localName%>.prototype.useHTTP = function() {
		if (this._transport !== null && this._transport.name !== 'http') {
			throw new Error('HTTP transport requested, but ' + this._transport.name + ' given.');
		} else {
			this.defaultTransport = 'http';
		}

		return this;
	};

	<%=localName%>.prototype.useWS = function() {
		if (this._transport !== null && this._transport.name !== 'ws') {
			throw new Error('WebSockets transport requested, but ' + this._transport.name + ' given.');
		} else {
			this.defaultTransport = 'ws';
		}

		return this;
	};

	<%=localName%>.prototype.close = function() {
		this.rpc.close();
	};

	<%=localName%>.prototype.on = <%=localName%>.prototype.addListener = function(type, listener) {
		if (this.listeners(type).length == 0) {
			if (this._transport && this._transport.supportEvents) {
				this.rpc.call({ method: 'rpc.on', params: [type], transport: this._transport.name });
			} else if (this._transport === null) {
				this.rpc.call({ method: 'rpc.on', params: [type], transport: 'ws'});
			}
		}
		EventEmitter.prototype.addListener.call(this, type, listener);
	};

	<%=localName%>.prototype.removeListener = function(type, listener) {
		EventEmitter.prototype.removeListener.call(this, type, listener);
		if (this.listeners(type).length == 0) {
			if (this._transport && this._transport.supportEvents) {
				this.rpc.call({ method: 'rpc.off', params: [type], transport: this._transport.name });
			} else if (this._transport === null) {
				this.rpc.call({ method: 'rpc.off', params: [type], transport: 'ws'});
			}
		}
	};

	<%=localName%>.prototype.removeAllListeners = function(type) {
		EventEmitter.prototype.removeAllListeners.call(this, type);
		if (this._transport && this._transport.supportEvents) {
			this.rpc.call({ method: 'rpc.off', params: [type], transport: this._transport.name });
		} else if (this._transport === null) {
			this.rpc.call({ method: 'rpc.off', params: [type], transport: 'ws'});
		}
	};
<%

var typedefs = Object.keys(metadata.types);

function getFullTypeName(type) {
	if (!type)
		return String(type);
	return typedefs.indexOf(type) !== -1 ? 'module:' + localName + '.' + localName + '.' + type : type;
}

(function generateTypes() {
	var types = Object.keys(metadata.types).map(function(key) { return metadata.types[key] });
	types.forEach(function(type) {
		typedefs.push(type.name);
		if (type.enum) { %>
	<%=localName%>.<%-type.name%> = function (val) {
		switch (val) {
			<%-Object.keys(type.struct).map(function(key) { return 'case \'' + key + '\': return ' + type.struct[key] }).join(';\n\t\t\t')%>;
			<%-Object.keys(type.struct).map(function(key) { return 'case ' + type.struct[key] + ': return \'' + key + '\'' }).join(';\n\t\t\t')%>;
		}
	};

	/** <%
 	if (type.description) { %>
	 * <%-type.description%> <%
	}%>
	 * @enum {number}
	 * @alias module:<%-localName%>.<%-localName%>.<%-type.name%>
	 */
	var <%=type.name%> = {
		<%-Object.keys(type.struct).map(function(key) { return key + ': ' + type.struct[key] }).join(',\n\t\t')%>
	};

	<%-Object.keys(type.struct).map(function(key) { return localName + '.' + type.name + '.' + key + ' = ' + type.struct[key] }).join(';\n\t')%>
	Object.freeze(<%=localName%>.<%-type.name%>);
<%
		} else { %>
	/** <%
			if (type.description) { %>
	 * <%-type.description%> <%
			} %>
	 * @typedef {Object} module:<%=localName%>.<%=localName%>.<%-type.name%>
	 <%-Object.keys(type.struct).map(function(key) {
	 	var struct = type.struct[key];
		return '* @property' + ' {' + getFullTypeName(struct.type) + '} ' + struct.name + ' ' + struct.description;
	 }).join('\n\t ')%>
	 */

<%
		}
	});
}())

function printArgs(methodName) {
	return metadata.methods[methodName].params.map(function(p) { return p.name }).join(', ');
}

var stubs = {};
function stubNamespace(ns) {
	var dot = ns.lastIndexOf('.');
	if (dot != -1) stubNamespace(ns.substr(0, dot));
	if (stubs[ns]) return;
	stubs[ns] = 1;
%>	<%=localName%>.prototype.<%=ns%> = {_ns:true};
<%
}

// Generate namespace stubs
var namespaces = [];
Object.keys(metadata.methods).forEach(function(methodName) {
	var dot = methodName.lastIndexOf('.');
	if (dot == -1) return;
	var namespace = methodName.substr(0, dot);
	if (namespaces.indexOf(namespace) == -1) namespaces.push(namespace);
});
%><%-namespaces.forEach(stubNamespace)%>
<%

function mapJavaScriptType(jsType, isArray) {
	var returnType = '';
	switch (jsType) {
		case '*':
		case 'any':
		case 'object':
		case 'json':
			returnType = 'object';
			break;

		case 'int':
		case 'integer':
		case 'number':
		case 'float':
		case 'double':
			returnType = 'number';
			break;

		case 'date':
		case 'time':
			returnType = 'Date';
			break;

		case 'bool':
		case 'boolean':
			returnType = 'boolean';
			break;


		case 'string':
		case 'url':
			returnType = 'string';
			break;

		case 'buffer':
		case 'binary':
			returnType = 'Uint8Array';
			break;

		case undefined:
			returnType = '';
			break;

		default:
			returnType = getFullTypeName(jsType);
	}
	return returnType + (isArray ? '[]' : '');
}

function getParameterNameWithOptional(param) {
	if (param.required === false || typeof param.default !== 'undefined') {
		return '[' + param.name + ']';
	}

	return param.name;
}

function resolveMethodName(methodName) {
	return methodName.indexOf('.') !== -1 ? ' "' + methodName + '"' : methodName;
}

function getMethodArgumentsHelp(methodInfo, length) {
	length = typeof length === 'number' ? length : methodInfo.params.length;
	return methodInfo.params.slice(0, length).map(function(param) {
		return '\n\t * @param {' + mapJavaScriptType(param.type, param.isArray) + '} ' + getParameterNameWithOptional(param) + ' ' + param.description;
	}).join('');
}
// Generate method stubs
Object.keys(metadata.methods).forEach(function(methodName) {
	var methodInfo = metadata.methods[methodName];
%>	/**
	 * <%=methodInfo.description%>
	 * @function
	 * @name module:<%=localName%>.<%=localName%>#<%-resolveMethodName(methodName)%><%=getMethodArgumentsHelp(methodInfo)%>
<%= (methodInfo.returns) ? '\t * @returns {' + mapJavaScriptType(methodInfo.returns, methodInfo.returnsArray) + '}\n' : ''
%>	 */
	<%=localName%>.prototype.<%= methodName %> = function(<%-printArgs(methodName)%>) {
		var args = Array.prototype.slice.call(arguments);
		var callback = null;
		if (args.length && typeof args[args.length - 1] === 'function') {
			callback = args.pop();
		}
		<%if (metadata.methods[methodName].params.length > 0) { %>args.length = Math.min(<%-metadata.methods[methodName].params.length%>, args.length);<% } else { %>args.length = 0;<% } %>
		return this.rpc.call({
			method: '<%-methodName%>',
			params: args,
			expectReturn: <%-!!metadata.methods[methodName].returns || !!metadata.methods[methodName].async%>,
			transport: this._transport && this._transport.name || this.defaultTransport
		}, callback);
	};

<%
});

(function generateEvents() {
	Object.keys(metadata.events).forEach(function(eventName) {
		var eventInfo = metadata.events[eventName];
%>	/**	<%
	if (eventInfo.description) { %>
	 * <%-eventInfo.description%>
	 * <%
	} %>
	 * @event module:<%=localName%>.<%=localName%>."<%=eventInfo.name%>"
	 * @type <%-getFullTypeName(eventInfo.type)%>
	 */

<%
	})%>
	define('<%-localName%>', <%-localName%>);

<%})()

%>}.apply(null, (function() {
	'use strict';

	if (typeof module !== 'undefined') {
		// node.js and webpack
		return [module, function() {}];
	}

	if (typeof window !== 'undefined') {
		// browser
		if (typeof window.jsonws === 'undefined') {
			throw new Error('No json-ws polyfills found.');
		}

		var jsonws = window.jsonws;

		return [jsonws, jsonws.define];
	}

	throw new Error('Unknown environment, this code should be used in node.js/webpack/browser');
}())));
