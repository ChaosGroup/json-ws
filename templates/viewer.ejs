<%
	var root = locals.root;
	var title = locals.title;
	var url = locals.url;
	var examples = locals.examples;
	var snippets = locals.snippets;
	var code = locals.code;
	var client = locals.client;
%><html>
<head>
	<meta charset="utf-8">
	<title><%= title %> - Playground</title>
	<script>
		<%-client%>
	</script>
	<script src="?proxy=JavaScript&localName=Proxy"></script>
	<script src="./static/ace.js"></script>
	<script src="./static/ext-language_tools.js"></script>
	<style>
		body {
			display: flex;
			margin: 0;
			flex-direction: column;
		}

		.ace_editor {
			margin: 0px;
		}

		.editors {
			display: flex;
			flex-grow: 10;
			justify-content: space-around;
			align-self: stretch;
			align-content: stretch;
		}

		.editors > div {
			border: 1px solid #3b8ec2;
			min-width: 49%;
			flex-basis: inherit;
		}

		.editors + div {
			flex-grow: 1;
			height: 0.5em;
		}

		.styled-select {
			display: flex;
			align-self: center;
			overflow: hidden;
			margin: 0 5px;
		}

		.styled-select:hover {
			background-color: #3cb0fd;
			text-decoration: none;
		}

		.styled-select select {
			background: transparent;
			border: 0px;
			font-size: 15px;
			padding: 10px 5px;
		}

		option {
			color: black;
		}

		.semi-square {
			-webkit-border-radius: 5px;
			-moz-border-radius: 5px;
			border-radius: 8px;
		}

		/* -------------------- Colors: Background */
		.blue    { background-color: #3b8ec2; }
		.red     { background-color: #c10a00; }

		/* -------------------- Colors: Text */
		.blue select    { color: #fff; }
		.blue select:hover    { color: #000; }


		#buttons {
			display: flex;
		}

		.btn {
			align-self: center;
			border-radius: 8px;
			border: 0;
			font-family: Arial;
			color: #ffffff;
			font-size: 15px;
			padding: 10px 15px;
			text-decoration: none;
			margin: 5px 5px;
		}

		.btn:hover {
			background-color: #3cb0fd;
			text-decoration: none;
		}

		.btn.red:hover{
			background: #e70a00;
		}
	</style>
</head>
<body>
	<div id="buttons">
			<button type="button" class="btn blue" id="runButton">Run</button>
			<button type="button" class="btn red" id="clearButton">Clear</button>
		<% if (examples.length > 0) { %>
		<div class="styled-select blue semi-square">
			<select onchange="changeExample(this.value)">
				<option>Examples</option>
				<% examples.forEach(function(example) {
					var link = url + "?viewer&example=" + example; %>
				<option value="<%- link %>"><%- example %></option>
				<% });%>
			</select>
		</div>
		<%}%>

		<% if (snippets.length > 0) { %>
		<div class="styled-select blue semi-square">
			<select onchange="changeExample(this.value)">
				<option>Snippets</option>
				<% snippets.forEach(function(snippet) {
					var link = url + "?viewer&snippet=" + snippet; %>
					<option value="<%- link %>"><%- snippet %></option>
				<% }); %>
			</select>
		</div>
		<%}%>
	</div>

	<div class="editors">
		<div>
			<textarea id="codeTextArea"><% if (code) { %>
<%- code %>  <% } %>
			</textarea>
		</div>
		<div>
			<textarea id="outputTextArea"></textarea>
		</div>
	</div>

	<div></div>
</div>

<script type="text/javascript">
	function changeExample(value) {
		window.location = value;
	}

	(function () {
		'use strict';

		var outputString = '';
		ace.require("ace/ext/language_tools");
		var editor = ace.edit("codeTextArea");
		var height = document.querySelector('.editors').clientHeight;
		var linesCount = height / editor.renderer.lineHeight;
		var output = ace.edit("outputTextArea");
		var aceOptions = {
			minLines: linesCount,
			maxLines: linesCount,
			mode: 'ace/mode/javascript'
		}
		editor.setOptions(aceOptions);
		editor.setOptions({
			enableBasicAutocompletion: true,
			enableSnippets: true,
			enableLiveAutocompletion: true
		});
		editor.$blockScrolling = Infinity
		output.setOptions(aceOptions);
		output.setReadOnly(true);
		output.getSession().setUseWorker(false);
		output.renderer.$cursorLayer.element.style.display = "none";
		output.renderer.setShowGutter(false);

		function getFirstLine() {
			if (!window.location.origin) {
				window.location.origin = window.location.protocol + '//' + window.location.hostname +
						(window.location.port ? ':' + window.location.port: '');
			}
			return 'var proxy = new Proxy("' + window.location.origin + window.location.pathname + '");\n\n';
		}

		function initEditor() {
			editor.focus();
			editor.setValue(getFirstLine(), 1);
			outputString = '';
			output.setValue(outputString);
		}
		initEditor();

		<% if (code) { %>
			editor.setValue(getFirstLine() + <%- '"' + code.replace(new RegExp('"', 'g'), '\\"').replace(new RegExp('\\r?\\n', 'g'), '\\n')  + '"' %>, 1);
		<% } %>

		function run() {
			var code = editor.getValue();
			outputString = '';
			new Function('console', code)({
				log: function () {
					var text = '';
					for (var i = 0; i < arguments.length; i++) {
						text += JSON.stringify(arguments[i], null, 4) + ' ';
						console.log(arguments[i]);
					}
					outputString += text + '\n';
					output.setValue(outputString);
				},
				clear: function() {
					console.clear();
					outputString = '';
					output.setValue(outputString);
				}
			});
			editor.focus();
		}

		function clear() {
			initEditor();
		}

		function KeyDown(e) {
			var evtobj = window.event ? event : e;
			if (evtobj.keyCode == 13 && evtobj.ctrlKey) {
				run();
			} else if (evtobj.keyCode == 46 && evtobj.ctrlKey) {
				clear();
			}
		}

		document.onkeydown = KeyDown;
		var runButton = document.querySelector('#runButton');
		runButton.addEventListener("click", run);
		var clearButton = document.querySelector('#clearButton');
		clearButton.addEventListener("click", clear);
	})();
</script>
</body>
</html>
